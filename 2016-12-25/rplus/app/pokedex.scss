$c-white: #fff;
$c-black: #000;
$c-tile-bgc: #ccc8fd;
$c-shadow-avatar: #aea8f3;
$c-indicator: #2f8393;

$bg-gradient: linear-gradient($c-white, #c8e0ff);

// $pm-sprite-src: 'https://images.weserv.nl/?url=//www.pokemap.net/img/vt&il';
$pm-sprite-src: 'https://images.weserv.nl/?url=//i.imgur.com/ku3aMpc.png&il';

@mixin fill-full($dir: 'full', $type: absolute) {
  position: $type;
  @if $dir != 'bottom' {top: 0; }
  @if $dir != 'right' {left: 0; }
  @if $dir != 'left' {right: 0; }
  @if $dir != 'top' {bottom: 0; }
}

.app {
  position: relative;
  margin-left: auto;
  margin-right: auto;
  padding: calc(3vh + 3em + 2.5vmax) 5vmin;
  text-align: center;
  font-family: sans;
  line-height: 1;

  // fake fixed gradient bgc for performance
  &::before {
    content: '';
    @include fill-full('full', fixed);
    z-index: -1;
    pointer-events: none;
    background-image: $bg-gradient;
  }
}

.header {
  @include fill-full('top', fixed);
  z-index: 10;
  overflow: hidden;
  padding-top: 3vh;
  padding-bottom: .25em;
  background-color: $c-white;
  text-transform: uppercase;
  background: $bg-gradient 50% 0 / 100vw 50vh no-repeat;
  box-shadow: 0 1px 5px $c-shadow-avatar;
}

.title {
  font-size: inherit;
  font-weight: 400;
  padding-bottom: .75em;
}

.subtitle {
  opacity: .5;
  font-size: smaller;
  font-weight: inherit;
  color: $c-indicator;

  &::before,
  &::after {
    display: inline-block;
    padding-left: .5em;
    padding-right: .5em;
    padding-bottom: .25em;
  }

  &::before {
    content: 'caught: ' counter(pm-caught);
  }

  &::after {
    content: 'seen: ' counter(pm-seen);
  }
}

.wall {
  position: relative;
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(5em, 1fr));
  grid-gap: .5em;

  @media (min-width: 360px) {
    grid-template-columns: repeat(auto-fill, minmax(15vmin, 1fr));
    grid-gap: 1vmin;
  }

  // for grid fallback
  @supports not (display: grid) {
    display: flex;
    flex-wrap: wrap;
    justify-content: center;
  }
}

.tile {
  position: relative;
  counter-increment: pm-counter;

  // for grid fallback
  @supports not (display: grid) {
    width: 15vmin;
    margin: .5vmin;
  }

  &[data-state="caught"] {
    // caught must have seen
    counter-increment: pm-seen pm-caught pm-counter;
  }

  &[data-state="seen"] {
    counter-increment: pm-seen pm-counter;
  }

  // for square tile layout
  &::before {
    content: '';
    display: block;
    padding-bottom: 100%;
  }
}

.pm {
  @include fill-full;
  color: $c-white;

  // pm avatar
  .tile:not([data-state="unknown"]) &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    z-index: 2;
    width: 90%;
    height: 90%;
    transform: translate(-50%, -50%);
    background-image: url($pm-sprite-src);
    background-position: var(--bgp);
    background-size: 1200% 1300%;
  }

  // pm avatar shadow image effect
  .tile[data-state="seen"] &::before {
    filter: contrast(0) opacity(20%);
    mix-blend-mode: difference;
  }

  // square with border-radius in background
  .tile:not([data-state="caught"]) &::after {
    content: '';
    @include fill-full;
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1;
    border-radius: 15%;
    background-color: $c-tile-bgc;
    font-size: calc(5vmin);
  }

  // pm index
  .tile[data-state="unknown"] &::after {
    content: counter(pm-counter);
  }
}

.close-btn {
  position: fixed;
  left: 0;
  right: 0;
  bottom: 5vmin;
  z-index: 5;
  width: 1em;
  height: 1em;
  font-size: 12vmin;
  margin-left: auto;
  margin-right: auto;
  border-radius: 50%;
  border: .125em solid rgba($c-white, .3);
  color: $c-indicator;
  box-shadow:
    inset 0 0 0 .03em,
    inset 0 0 0 .5em rgba($c-white, .9),
    0 0 0 .05em rgba($c-black, .1);

  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    width: 40%;
    height: .03em;
    opacity: .8;
    background-color: currentColor;
    transform: translate(-50%, -50%) rotate(-45deg) scaleY(1.25);
  }

  &::after {
    transform: translate(-50%, -50%) rotate(45deg) scaleY(1.25);
  }

  &:focus,
  &:active {
    filter: contrast(.75);
  }
}

.scroll-indicator {
  position: fixed;
  top: 70%;
  right: -.4em;
  z-index: 10;
  width: 1em;
  height: 1em;
  font-size: 12vmin;
  border-radius: 50%;
  color: $c-indicator;
  background-color: rgba($c-white, .5);
  box-shadow: 0 0 .15em rgba($c-indicator, .6);
  cursor: pointer;

  &::before,
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 37.5%;
    width: 17.5%;
    height: 17.5%;
  }

  &::before {
    border-top: .05em solid;
    border-right: .05em solid;
    transform: scaleX(.9) translate(-50%, -100%) rotate(-45deg);
  }

  &::after {
    border-left: .05em solid;
    border-bottom: .05em solid;
    transform: scaleX(.9) translate(-50%, 0%) rotate(-45deg);
  }
}

// reset forcely

:root {
  box-sizing: border-box;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: inherit;

  // box-shadow: inset 0 0 1px;

  &::before,
  &::after {
    box-sizing: inherit;
  }
}
