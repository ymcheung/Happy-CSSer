$app-width: 360px;
$app-height: 640px;

.app {
  position: relative;
  // width: $app-width;
  // height: $app-height;
  margin-left: auto;
  margin-right: auto;
  text-align: center;
  background-color: #eee;
  font-family: sans;

  padding-top: 4em; // for fixed header
}

.header {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  z-index: 10;
  background-color: #fff;
  background-image: linear-gradient(transparent 80%, rgba(#000, .1));
  text-transform: uppercase;
}

.title {
}

.subtitle {
  font-size: inherit;
  font-weight: inherit;

  @mixin subtitle-gap ($size: .5em) {
    padding-left: $size;
    padding-right: $size;
  }

  &::before {
    content: 'caught: ' attr(data-caught);
    @include subtitle-gap;
  }

  &::after {
    content:  'seen: ' attr(data-seen);;
    @include subtitle-gap;
  }
}

.wall {
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  grid-gap: 3px;
}

.cell {
  position: relative;
  counter-increment: pm-counter;

  &::before {
    content: '';
    display: block;
    padding-bottom: 100%;
  }
}

.pm {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  color: #fff;
  background-size: 0% 0%;
  background-repeat: no-repeat;

  // avatar
  &:not([data-state="unknown"])::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 2;
    background-image: inherit;
    background-position: 50%;
    background-size: cover;
    background-repeat: no-repeat;
  }

  &[data-state="seen"]::before {
    filter: contrast(0) opacity(30%);
  }

  &:not([data-state="caught"])::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    z-index: 1;
    display: flex;
    justify-content: center;
    align-items: center;
    border-radius: 15%;
    background-color: #ccf;
    font-size: 1.25em;
  }

  &[data-state="unknown"]::after {
    content: counter(pm-counter);
  }
}

/*
.app
  header.header
    h1.title pokedex
    h2(data-caught="144", data-seen="147")

  main.wall
    .cell
      .pm
*/

// reset forcely

:root {
  box-sizing: border-box;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: inherit;

  // box-shadow: inset 0 0 1px;

  &::before,
  &::after {
    box-sizing: inherit;
  }
}
